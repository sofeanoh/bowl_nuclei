# -*- coding: utf-8 -*-
"""deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JIAW-5j0wFiS-O1L8nepJT5H8SvPrS-N

# Deployment for nuclei segmentation

This notebook is run on colab for computer resources. Please upload the following in the file section:

1. data-science-bowl-2018.zip
2. model.h5 saved from the development notebook.

In this notebook, upon setting up the environment, you might be required to restart the kernel for 1-2 times.
"""

# ensure environment same with development
!pip install tensorflow==2.8
!pip uninstall tensorflow-addons -y
!pip install tensorflow-addons
!pip install protobuf==3.20.*
!pip install git+https://github.com/tensorflow/examples.git

#1. Import packages
import tensorflow as tf
from IPython.display import clear_output
import matplotlib.pyplot as plt
import cv2
import numpy as np
import glob, os
from tensorflow import keras
from tensorflow.keras import layers, losses, models, optimizers, Sequential
from tensorflow.keras.models import Model
import datetime

filepath = "/content/data-science-bowl-2018-2"
images = []
masks = []

# Zip File
!unzip "/content/data-science-bowl-2018.zip"

# declare functions here

def display(display_list):
  plt.figure(figsize=(15, 15))

  title = ['Input Image', 'True Mask', 'Predicted Mask']

  for i in range(len(display_list)):
    plt.subplot(1, len(display_list), i+1)
    plt.title(title[i])
    plt.imshow(tf.keras.utils.array_to_img(display_list[i]))
    plt.axis('off')
  plt.show()

def create_mask(pred_mask):
  pred_mask = tf.math.argmax(pred_mask, axis=-1)
  pred_mask = pred_mask[..., tf.newaxis]
  # print(pred_mask)
  return pred_mask

def show_predictions(dataset=None, num=1):
  if dataset:
    for image, mask in dataset.take(num):
      pred_mask = model.predict(image)
      display([image[0], mask[0], create_mask(pred_mask)[0]])
  else:
    display([sample_image, sample_mask,
             create_mask(model.predict(sample_image[tf.newaxis, ...]))])

#2. Load images
image_path = os.path.join(filepath,'test', 'inputs')
for img in os.listdir(image_path):
    #Get the full path of the image file
    full_path = os.path.join(image_path,img)
    #Read the image file based on the full path
    img_np = cv2.imread(full_path)
    #Convert the image from bgr to rgb
    img_np = cv2.cvtColor(img_np,cv2.COLOR_BGR2RGB)
    #Resize the image into 128x128
    img_np = cv2.resize(img_np,(128,128))
    #Place the image into the empty list
    images.append(img_np)

#3. Load masks
mask_path = os.path.join(filepath,'test', 'masks')
for mask in os.listdir(mask_path):
    #Get the full path of the mask file
    full_path = os.path.join(mask_path,mask)
    #Read the mask file as a grayscale image
    mask_np = cv2.imread(full_path,cv2.IMREAD_GRAYSCALE)
    #Resize the image into 128x128
    mask_np = cv2.resize(mask_np,(128,128))
    #Place the mask into the empty list
    masks.append(mask_np)

# check images and masks
print(images[0])
print(masks[0])

#4. Convert the list of np array into a full np array
images_np = np.array(images)
masks_np = np.array(masks)

# check images and masks
print(images_np.shape)
print(masks_np.shape)

#5. Data preprocessing
#5.1. Expand the mask dimension to include the channel axis
masks_np_exp = np.expand_dims(masks_np,axis=-1)
#5.2. Convert the mask value into just 0 and 1
converted_masks_np = np.round(masks_np_exp/255)
#5.3. Normalize the images pixel value
normalized_images_np = images_np/255.0

print(masks_np_exp.shape)

#6. Convert the numpy array into tensorflow tensors
images = tf.data.Dataset.from_tensor_slices(normalized_images_np)
masks = tf.data.Dataset.from_tensor_slices(converted_masks_np)
print(images.element_spec.shape, masks.element_spec.shape)

#7. Combine features and labels together to form a zip dataset
test_dataset = tf.data.Dataset.zip((images,masks))

#8. Convert the zip dataset into prefetch dataset
BATCH_SIZE = 10
test = test_dataset.batch(BATCH_SIZE).prefetch(buffer_size=tf.data.AUTOTUNE)
print(test.element_spec)

# visualise a sample of image and mask
for images, masks in test.take(1):
  for i in range(2):
    sample_image, sample_mask = images[i], masks[i]
    display([sample_image, sample_mask])

# Load the model
model = keras.models.load_model('/content/model.h5')

model.predict(test)

# see how good our model is
model.evaluate(test)

# display some predictions
show_predictions(test, 3)

"""Yeay! model ready for production :D."""